#!/bin/sh

[ "x$CPAN" = x ] && CPAN=http://mirrors.namecheap.com/CPAN
[ "x$MODSDIR" = x ] && MODSDIR="$HOME/pkg/mods"

latest(){
    awk '
function vergt(x, y){
    if(!y) return 1
    if(x == y) return 0
    c = split(x, a, /\./)
    d = split(y, b, /\./)
    if(c<=2 && d<=2) return ((0+x) > (0+y))
    if(d > c) return 0
    if(c > d) return 1
    for(i=1; i<=c; i++)
        if(length(a[i]) > length(b[i]) || 0+a[i] > 0+b[i])
            return 1
    return 0
}

NR >= 10 {
    x = $3
    sub(/.*\//, "", x);
    sub(/(\.tar|\.gz|\.bz2|\.tgz|\.zip)+$/, "", x) ;
    if(!(i = match(x, /-[vV]?[0-9.]+$/))) next
    v = substr(x, i+1); sub(/^[vV]/, "", v)
    x = substr(x, 1, i-1)
    if(v == ver[x]){
        mods[x] = mods[x] $1 "\n"
    }else if(vergt(v, ver[x])){
        ver[x] = v
        mods[x] = $1 "\n"
        dists[x] = $3
    }
}

END {
    for(d in dists) print d, dists[d] >"dists"
    OFS="\n"; for(d in mods) print d, mods[d] >"mods"
}
' ; } #latest

stale(){
    echo `stat --format %W $1` `date +%s` | \
        awk '$2 - $1 > 60*60*24 { exit(0) } END { exit(1) }'
    return $?
}

sync()(
    [ -d "$HOME/.perlpkg" ] || mkdir "$HOME/.perlpkg"
    if [ ! -f "$HOME/.perlpkg/dists" ] || stale "$HOME/.perlpkg/dists"
    then
        cd "$HOME/.perlpkg"
        URL=$CPAN/modules/02packages.details.txt.gz
        curl -sL $URL |gzip -dc |latest
    fi
)

fetch(){
    DIST=$1
    SRC=`awk -v "d=$1" '$1 == d { print $2 }' "$HOME/.perlpkg/dists"`
    case "$SRC" in
    '') echo "perlpkg: error: failed to find dist: $1" 1>&2; return 1
    esac
    url=
    echo "perlpkg: fetching $SRC." 1>&2
    curl -s -LO "$CPAN/authors/id/$SRC"
}

meta(){
    awk -v src="$SRC" '
BEGIN {
    c = split(src, a, /\//);
    auth = a[c-1]
    dist = a[c]
    sub(/(\.tar|\.gz|\.bz2|\.zip|\.tgz)+$/, "", dist);
    url = "http://cpansearch.perl.org/src/"
    url = url auth "/" dist "/META.yml"
    exit(system("curl -s "url))
}
' ; }

pkginfo(){
    printf "source\nhttp://cpan.metacpan.org/authors/id/$SRC\n\n"
    printf "url\nhttps://metacpan.org/release/$DIST\n\n"
    printf "pkgrel\n1\n\n"
    printf "arch\nany\n\n"
    printf "cpandist\n$DIST\n\n"
    awk '
BEGIN { OFS="\n"; ORS="\n\n" }

/^version:/ {
    gsub(/\047/, "", $2)
    print "pkgver", $2
}
/^abstract:/ {
    for(i=2; i<=NF; i++) desc = desc $i " "
    sub(/ $/, "", desc)
    gsub(/"/, "", desc)
    print "pkgdesc", desc
}

dt && !/^  +/ { dt=0 }
dt {
    sub(/:$/, "", $1)
    gsub(/\047/, "", $2)
    deps[dt, ++deps[dt,"n"]] = $1 ">=" $2
}
/^requires:$/ { dt = "cpanreq" }
/^build_requires:$/ { dt = "cpanbreq" }
/^configure_requiers:$/ { dt = "cpancreq" }
/^test_requires:$/ { dt = "cpantreq" }

function out(x){
    x = "cpan"x
    print x
    for(i=1; i<=deps[x,"n"]; i++) print deps[x,i]
    print ""
}
END {
    OFS=" "; ORS="\n"
    out("req"); out("mreq"); out("treq")
}
' ; } #pkginfo

pkgconv(){
    awk -v mods="$HOME/.perlpkg/mods" '
BEGIN {
    FS="\n"; RS=""; ORS="\n\n"
    while(getline <mods >0){
        for(i=2; i<=NF; i++) dist[$i] = $1
    }
    depfld["cpanreq"] = "depends"
    depfld["cpanbreq"] = depfld["cpancreq"] = "makedepends"
    depfld["cpantreq"] = "checkdepends"
}

function splitdep(modver){
    if(split(modver, mv, />=[vV]?/) != 2){
        print "error: failed to split dep: "modver | "cat 1>&2"
        exit(1)
    }
    mod = mv[1]
    ver = mv[2]
}

function perlver(){
    match(ver, /[0-9]+$/)
    if(RLENGTH <= 3){
        a = substr(ver, 1, 1)
        b = substr(ver, 3)
        ver = sprintf("%d.%d", a, b)
    }else if(RLENGTH == 6){
        a = substr(ver, 1, 1)
        b = substr(ver, 3, 3)
        c = substr(ver, 6, 3)
        ver = sprintf("%d.%d.%d", a, b, c)
    }
}

function pkg(x){
    if(!(sub(/^App-/, "", x) || x == "perl")){
        x = "perl-"x
        sub(/-perl$/, "", x)
    }
    return tolower(x)
}

1

$1 == "cpandist" {
    printf "pkgname\n%s\n\n", pkg($2)
}

$1 in depfld {
    OFS=">="; ORS="\n"
    print depfld[$1]
    for(i=2; i<=NF; i++){
        splitdep($i)
        
        if(mod == "perl"){
            d = "perl"
            perlver()
        }else if(!(mod in dist)){
            #print "warning: skipping core-only module: " mod |"cat 1>&2"
            continue
        }else{
            d = dist[mod]
        }
        
        # version is only used if the mod req-d has the same name
        # as the distribution. Req-d versions must also be >0.
        m = d; gsub(/-/, "::", m)
        if(m == mod && ver != "0"){
            print pkg(d), ver
        }else{
            print pkg(d)
        }
    }
    print ""
    OFS="\n"; ORS="\n\n";
}
' ; } #pkgconv

xsarch(){
    tball=`echo $SRC | sed 's/.*\///'`
    if ! tar tf "$tball" | grep -q '\.xs$' ; then
        cat
    else
        awk '
BEGIN { FS=OFS="\n"; RS=""; ORS="\n\n" }
$1 == "arch" { print "arch", "i686 x86_64"; next }
1
'
    fi
}

slipbash(){
awk '
BEGIN { OFS=FS="\n"; RS=""; ORS="\n\n" }
$1 == "cpancreq" {
    for(i=2; i<=NF; i++) if($i == "Module::Build") MB=1
}
$1 == "source" {
    dir = $2
    sub(/.*\//, "", dir)
    sub(/(\.(tar|gz|bz2|tgz|zip))+$/, "", dir)
}
1
END {
    unset = "unset PERL5LIB PERL_MM_OPT PERL_LOCAL_LIB_ROOT"
    export = "export PERL_MM_USE_DEFAULT=1"
    if(MB){
        unset = unset " PERL_MB_OPT"
        print "build", unset, export " MODULEBUILDRC=/dev/null", \
            "/usr/bin/perl Build.PL", "./Build"
        print "check", unset, export, "./Build test"
        print "package", unset, \
            "./Build install installdirs=vendor destdir=\"$pkgdir\""
    }else{
        print "build", unset, export " PERL_AUTOINSTALL=--skipdeps", \
            "/usr/bin/perl Makefile.PL", "make"
        print "check", unset, export, "make test"
        print "package", unset, \
            "make install INSTALLDIRS=vendor DESTDIR=\"$pkgdir\""
    }
    
    print "_dir", dir
}
' ; } #slipbash

# copied from pkg() func above. Redundant but necessary for now.
pkgname(){
awk -v "x=$DIST" '
BEGIN {
    if(!sub(/^App-/, "", x)){
        x = "perl-"x
        sub(/-perl$/, "", x)
    }
    print tolower(x)
}
' ; }

mod(){
    if [ -f "$MODSDIR/$1" ] ; then
        if ! modpkg "$MODSDIR/$1" ; then
            echo "makepb: in $MODSDIR/$1" 1>&2
        fi
    else
        cat
    fi
}

perlpkg(){
    case $# in
    0)  echo "usage: perlpkg [exact CPAN distribution name]" 1>&2; return 2 ;;
    esac
    if sync && fetch "$1"; then
        meta |pkginfo |xsarch |slipbash |pkgconv |mod `pkgname` >PKGINFO
        makepb
    else
        return 1
    fi
}

perlpkg "$@"
exit $?
